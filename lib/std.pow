map(A f)
  shift 2
  expand
    for k,v of ~A
      ~f $@ $k $v

mappipe(f)
  shift
  while read -r line
    $f $@ $line

curry(out f x)
  expand
    ~out()
      ~f '~x' $@

keys(x y)
  echo $x

values(x y)
  echo $y

set?(s)
  expand
    return ${~s:set?}

unset?(s)
  expand
    return ${~s:unset?}

empty?(s)
  expand
    return ${~s:empty?}

nonempty?(s)
  expand
    return ${~s:nonempty?}

bool(int)
  return $int

filter(A p)
  shift 2
  expand
    for k,v of ~A
      if ~p $@ $k $v
        echo $v

compose(fg f g)
  expand
    ~fg()
      ~f $(~g $@)

pick(A k)
  if -z $k
    return 1
  expand
    local output=${~A[~k]}
  if -n $output
    echo $output

first(A)
  if unset? A
    return 1
  expand
    echo ${~A[0]}

last(A)
  if unset? A
    return 1
  expand
    echo ${~A[-1]}

require_env(var)
  expand
    pass ${~var:set! "Required ENV-variable ~var not set (hint: '~var=yourvalue ./yourscript')."}

require_cmd(var)
  if not command -v $var 1>/dev/null 2>/dev/null
    echo "Please install the required command '$var' (it was not found)." >/dev/stderr
    exit 1

ismap?(x)
  local result k1=__ismap_dummy1 k2=__ismap_dummy2
  if empty? x
    return 1
  expand
    local ~k1=0 ~k2=0
    local v
    test ${~x[~k1]:set?} and v=${~x[~k1]}
    ~x[~k1]=a
    ~x[~k2]=b
    if ${~x[~k1]} is a
      unset ~x[~k1]
      unset ~x[~k2]
      return 0
    else
      test ${v:set?} and ~x=$v or unset ~x
      return 1

copy_map(__A __B)
  if not ismap? $__A
    echo "ERROR: in copy_map: $__A is not a map"
    return 1
  if not ismap? $__B
    echo "ERROR: in copy_map: $__B is not a map"
    return 1
  expand
    for __k,__v of ~__A
      ~__B[$__k]=$__v

copy_array(__A __B)
  expand
    for __k,__v of ~__A
      if not $__k match ^[1-9]+$
        echo "ERROR: not a valid array key: $__k"
        return 1
      ~__B[$__k]=$__v

clear_array(__A)
  expand
    for __k in ${~__A:keys}
      unset ~__A[$__k]

NL="
"

pass()
  true


